// Code generated by Kitex v0.11.3. DO NOT EDIT.

package productcatalogservice

import (
	"context"
	"errors"
	product "github.com/HCH1212/tiktok_e-commence_rpc/gen/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateProduct": kitex.NewMethodInfo(
		createProductHandler,
		newCreateProductArgs,
		newCreateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ChangeProduct": kitex.NewMethodInfo(
		changeProductHandler,
		newChangeProductArgs,
		newChangeProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteProduct": kitex.NewMethodInfo(
		deleteProductHandler,
		newDeleteProductArgs,
		newDeleteProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FindProduct": kitex.NewMethodInfo(
		findProductHandler,
		newFindProductArgs,
		newFindProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FindProducts": kitex.NewMethodInfo(
		findProductsHandler,
		newFindProductsArgs,
		newFindProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	productCatalogServiceServiceInfo                = NewServiceInfo()
	productCatalogServiceServiceInfoForClient       = NewServiceInfoForClient()
	productCatalogServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productCatalogServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productCatalogServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productCatalogServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductCatalogService"
	handlerType := (*product.ProductCatalogService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func createProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.Product)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).CreateProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateProductArgs:
		success, err := handler.(product.ProductCatalogService).CreateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateProductArgs() interface{} {
	return &CreateProductArgs{}
}

func newCreateProductResult() interface{} {
	return &CreateProductResult{}
}

type CreateProductArgs struct {
	Req *product.Product
}

func (p *CreateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.Product)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateProductArgs) Unmarshal(in []byte) error {
	msg := new(product.Product)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateProductArgs_Req_DEFAULT *product.Product

func (p *CreateProductArgs) GetReq() *product.Product {
	if !p.IsSetReq() {
		return CreateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateProductResult struct {
	Success *product.ProductId
}

var CreateProductResult_Success_DEFAULT *product.ProductId

func (p *CreateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.ProductId)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateProductResult) Unmarshal(in []byte) error {
	msg := new(product.ProductId)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateProductResult) GetSuccess() *product.ProductId {
	if !p.IsSetSuccess() {
		return CreateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.ProductId)
}

func (p *CreateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateProductResult) GetResult() interface{} {
	return p.Success
}

func changeProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.Product)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).ChangeProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ChangeProductArgs:
		success, err := handler.(product.ProductCatalogService).ChangeProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ChangeProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newChangeProductArgs() interface{} {
	return &ChangeProductArgs{}
}

func newChangeProductResult() interface{} {
	return &ChangeProductResult{}
}

type ChangeProductArgs struct {
	Req *product.Product
}

func (p *ChangeProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.Product)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ChangeProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ChangeProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ChangeProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ChangeProductArgs) Unmarshal(in []byte) error {
	msg := new(product.Product)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ChangeProductArgs_Req_DEFAULT *product.Product

func (p *ChangeProductArgs) GetReq() *product.Product {
	if !p.IsSetReq() {
		return ChangeProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ChangeProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChangeProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ChangeProductResult struct {
	Success *product.ProductId
}

var ChangeProductResult_Success_DEFAULT *product.ProductId

func (p *ChangeProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.ProductId)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ChangeProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ChangeProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ChangeProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ChangeProductResult) Unmarshal(in []byte) error {
	msg := new(product.ProductId)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ChangeProductResult) GetSuccess() *product.ProductId {
	if !p.IsSetSuccess() {
		return ChangeProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ChangeProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.ProductId)
}

func (p *ChangeProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChangeProductResult) GetResult() interface{} {
	return p.Success
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.ProductId)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).DeleteProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteProductArgs:
		success, err := handler.(product.ProductCatalogService).DeleteProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteProductArgs() interface{} {
	return &DeleteProductArgs{}
}

func newDeleteProductResult() interface{} {
	return &DeleteProductResult{}
}

type DeleteProductArgs struct {
	Req *product.ProductId
}

func (p *DeleteProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.ProductId)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteProductArgs) Unmarshal(in []byte) error {
	msg := new(product.ProductId)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteProductArgs_Req_DEFAULT *product.ProductId

func (p *DeleteProductArgs) GetReq() *product.ProductId {
	if !p.IsSetReq() {
		return DeleteProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteProductResult struct {
	Success *product.Pass
}

var DeleteProductResult_Success_DEFAULT *product.Pass

func (p *DeleteProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.Pass)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteProductResult) Unmarshal(in []byte) error {
	msg := new(product.Pass)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteProductResult) GetSuccess() *product.Pass {
	if !p.IsSetSuccess() {
		return DeleteProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.Pass)
}

func (p *DeleteProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteProductResult) GetResult() interface{} {
	return p.Success
}

func findProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.ProductSUK)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).FindProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FindProductArgs:
		success, err := handler.(product.ProductCatalogService).FindProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FindProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFindProductArgs() interface{} {
	return &FindProductArgs{}
}

func newFindProductResult() interface{} {
	return &FindProductResult{}
}

type FindProductArgs struct {
	Req *product.ProductSUK
}

func (p *FindProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.ProductSUK)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FindProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FindProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FindProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FindProductArgs) Unmarshal(in []byte) error {
	msg := new(product.ProductSUK)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FindProductArgs_Req_DEFAULT *product.ProductSUK

func (p *FindProductArgs) GetReq() *product.ProductSUK {
	if !p.IsSetReq() {
		return FindProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FindProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FindProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FindProductResult struct {
	Success *product.Product
}

var FindProductResult_Success_DEFAULT *product.Product

func (p *FindProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.Product)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FindProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FindProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FindProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FindProductResult) Unmarshal(in []byte) error {
	msg := new(product.Product)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FindProductResult) GetSuccess() *product.Product {
	if !p.IsSetSuccess() {
		return FindProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FindProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.Product)
}

func (p *FindProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindProductResult) GetResult() interface{} {
	return p.Success
}

func findProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.MeiliReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).FindProducts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FindProductsArgs:
		success, err := handler.(product.ProductCatalogService).FindProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FindProductsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFindProductsArgs() interface{} {
	return &FindProductsArgs{}
}

func newFindProductsResult() interface{} {
	return &FindProductsResult{}
}

type FindProductsArgs struct {
	Req *product.MeiliReq
}

func (p *FindProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.MeiliReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FindProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FindProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FindProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FindProductsArgs) Unmarshal(in []byte) error {
	msg := new(product.MeiliReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FindProductsArgs_Req_DEFAULT *product.MeiliReq

func (p *FindProductsArgs) GetReq() *product.MeiliReq {
	if !p.IsSetReq() {
		return FindProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FindProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FindProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FindProductsResult struct {
	Success *product.MeiliResp
}

var FindProductsResult_Success_DEFAULT *product.MeiliResp

func (p *FindProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.MeiliResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FindProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FindProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FindProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FindProductsResult) Unmarshal(in []byte) error {
	msg := new(product.MeiliResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FindProductsResult) GetSuccess() *product.MeiliResp {
	if !p.IsSetSuccess() {
		return FindProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FindProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.MeiliResp)
}

func (p *FindProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindProductsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateProduct(ctx context.Context, Req *product.Product) (r *product.ProductId, err error) {
	var _args CreateProductArgs
	_args.Req = Req
	var _result CreateProductResult
	if err = p.c.Call(ctx, "CreateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeProduct(ctx context.Context, Req *product.Product) (r *product.ProductId, err error) {
	var _args ChangeProductArgs
	_args.Req = Req
	var _result ChangeProductResult
	if err = p.c.Call(ctx, "ChangeProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, Req *product.ProductId) (r *product.Pass, err error) {
	var _args DeleteProductArgs
	_args.Req = Req
	var _result DeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindProduct(ctx context.Context, Req *product.ProductSUK) (r *product.Product, err error) {
	var _args FindProductArgs
	_args.Req = Req
	var _result FindProductResult
	if err = p.c.Call(ctx, "FindProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindProducts(ctx context.Context, Req *product.MeiliReq) (r *product.MeiliResp, err error) {
	var _args FindProductsArgs
	_args.Req = Req
	var _result FindProductsResult
	if err = p.c.Call(ctx, "FindProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
